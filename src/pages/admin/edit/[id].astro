---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { getCollection } from "astro:content";

// Função para gerar os caminhos estáticos
export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { id: post.id },
  }));
}

// Recupera o parâmetro de URL (id)
const { id } = Astro.params;
const post = (await getCollection("blog")).find((post) => post.id === id);
---

<AdminLayout title="Edit Post" description="Edit a blog post">
  <section class="form-container">
    <div class="form-card">
      <h2 class="form-title">Edit Post</h2>
      <form method="post" action={`/admin/edit/${id}`}>
        <label for="title">Title</label>

        <input
          type="text"
          id="title"
          name="title"
          value={post?.data.title}
          required
        />

        <div class="hero-img-display">
          <label>Current Image:</label>

          <!-- Container de imagem e input de arquivo -->
          <div class="image-container">
            <img
              onclick="document.getElementById('heroImg').click();"
              id="imagePreview"
              src={post?.data.heroImage}
              alt="Current Image"
            />
            <input type="file" id="heroImg" name="heroImg" accept="image/*" />
          </div>
        </div>

        <label for="content">Content</label>
        <textarea id="content" name="content" required>
          {post?.body}
        </textarea>

        <button type="submit" class="btn-submit">Save Changes</button>
      </form>
    </div>
  </section>
</AdminLayout>

<style>
  input[type="file"] {
    display: none; /* Oculta o input real */
  }
  .image-container {
    position: relative;
  }
  img {
    width: 300px;
    height: 200px;
    object-fit: cover;
    object-position: center;
    display: block;
    cursor: pointer;
  }
</style>

<script>
  // Seleciona o input de arquivo e a imagem de visualização
  const fileInput = document.getElementById(
    "heroImg"
  ) as HTMLInputElement | null;
  const imagePreview = document.getElementById(
    "imagePreview"
  ) as HTMLImageElement | null;

  if (fileInput && imagePreview) {
    // Função para mostrar a imagem selecionada
    fileInput.addEventListener("change", (event: Event) => {
      const input = event.target as HTMLInputElement;
      const file = input.files ? input.files[0] : null;

      if (file) {
        const reader = new FileReader();

        reader.onload = (e: ProgressEvent<FileReader>) => {
          if (e.target) {
            imagePreview.src = e.target.result as string;
          }
        };

        reader.readAsDataURL(file);
      }
    });
  }
</script>
